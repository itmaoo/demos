=========Docker enable 8ks=======
安装文档 https://docs.docker.com/desktop/kubernetes/

kubectl config get-contexts
kubectl config use-context docker-desktop
kubectl get nodes

#创建pod
kubectl create -f /Users/mario/IdeaProjects/demos/operation/k8s/nginx.yaml --record
## --record参数可以记录命令，我们可以很方便的查看每次 revision 的变化

kubectl delete -f /Users/mario/IdeaProjects/demos/operation/k8s/nginx.yaml
kubectl get pod

kubectl get pods -n default -o wide
kubectl delete pod nginx -n default

kubectl create deployment nginx --image=nginx:latest
kubectl delete deploy nginx -n default

kubectl create deployment nginx --image=nginx:latest
kubectl expose deployment nginx --port=6666 --target-port=80
# 指定源端口为 80，要映射到 6666 端口

kubectl get services


#扩容
kubectl scale deployment nginx-deployment --replicas 10

# 如果集群支持 horizontal pod autoscaling 的话，还可以为Deployment设置自动扩展
kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80

# 回滚
kubectl rollout undo deployment/nginx-deployment

更新 Deployment
假如我们现在想要让 nginx pod 使用 nginx:1.9.1 的镜像来代替原来的 nginx:1.7.9 的镜像
$ kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1
deployment "nginx-deployment" image updated

# 可以使用 edit 命令来编辑 Deployment
kubectl edit deployment/nginx-deployment
# deployment "nginx-deployment" edited

# 查看 rollout 的状态
kubectl rollout status deployment/nginx-deployment

# 查看历史 RS
kubectl get rs

# Deployment 更新策略
# Deployment 可以保证在升级时只有一定数量的 Pod 是 down 的。默认的，它会确保至少有比期望的Pod数量少 一个是up状态（多一个不可用）

# Deployment 同时也可以确保只创建出超过期望数量的一定数量的 Pod。默认的，它会确保多比期望的Pod数 量多一个的 Pod 是 up 的（多1个 surge ）
# 未来的 Kuberentes 版本中，将从1-1变成25%-25%

kubectl describe deployments

Rollover（多个rollout并行）
假如您创建了一个有5个 niginx:1.7.9  replica的 Deployment，但是当还只有3个 nginx:1.7.9 的 replica 创建 出来的时候您就开始更新含有5个 nginx:1.9.1  replica 的 Deployment。在这种情况下，Deployment 会立即 杀掉已创建的3个 nginx:1.7.9 的 Pod，并开始创建 nginx:1.9.1 的 Pod。它不会等到所有的5个 nginx:1.7.9 的 Pod 都创建完成后才开始改变航道

# 回退 Deployment
kubectl set image deployment/nginx-deployment nginx=nginx:1.91
kubectl rollout status deployments nginx-deployment
kubectl get pods
kubectl rollout history deployment/nginx-deployment
kubectl rollout undo deployment/nginx-deployment
kubectl rollout undo deployment/nginx-deployment --to-revision=2   ## 可以使用 --revision参数指定
# 某个历史版本
kubectl rollout pause deployment/nginx-deployment    ## 暂停 deployment 的更新
# 您可以用 kubectl rollout status 命令查看 Deployment 是否完成。如果 rollout 成功完成， kubectl rollout status 将返回一个0值的 Exit Code


kubectl rollout status deploy/nginx
# Waiting for rollout to finish: 2 of 3 updated replicas are available...
# deployment "nginx" successfully rolled out

# 清理 Policy
# 您可以通过设置 .spec.revisonHistoryLimit 项来指定 deployment 多保留多少 revision 历史记录。默认的会 保留所有的 revision；如果将该项设置为0，Deployment 就不允许回退了



kubectl api-resources

namespace（定义相互隔离的环境） -》 deployment（一组服务）/service（对外暴露服务） -》 pod（管理的最小单元）





